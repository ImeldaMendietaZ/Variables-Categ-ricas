---
title: "clase 19"
author: "ImeLDa Mendieta Z"
date: "6 de abril de 2018"
output: html_document
---


G^(k) es la desviación residual en la iteración k
  
    |G^(k) - G^(k+1)|/(0.1+|G^)(k)| < E(epsilon )



```{r}
set1 <- data.frame(x1= 1:10, y= c(0,0,0,0,0,1,1,1,1,1))
set1
mod.fit1 <- glm(y ~ x1, set1, family = binomial(link = logit), trace=TRUE)
names(mod.fit1)
mod.fit1$coefficients


x11(width = 10, height = 6, pointsize = 12)
par(mfrow = c(1,2))
plot(x = set1$x1, y = set1$y, main = "Gráfica para set1", ylab ="Probabilidad estimada", xlab = expression(x[i]), panel.first = grid(col = "gray", lty = "dotted") )
curve(expr = predict(object = mod.fit1, newdata = data.frame(x1 = x), type = "response"), col = "red", add = TRUE , lwd = 2, n = 1000)

# mod.fit1 <- glm(y ~ x1, set1, family = binomial(link = logit), trace=TRUE)
install.packages("logistf")
library(mice)
library(logistf)


mod.fit.firth1 <- logistf (y ~ x1, data =  set1)
options(digits = 4)
summary(mod.fit.firth1)
names(mod.fit.firth1)

data.frame(x = set1$x1, pi.hat = mod.fit.firth1$predict)
options(digits = 7)
logistftest(object = mod.fit.firth1, test = ~ x1 - 1, values = 0)

set2 <- data.frame(x1=c(1,2,3,4,5,6,7,8,9,10), y=c(0,0,0,0,0,1,1,1,1,1))
set2

beta.hat <- mod.fit.firth1$coefficients
curve(expr = exp(beta.hat[1]+ beta.hat[2]*x)/(1 + exp(beta.hat[1]+ beta.hat[2]*x)) , col = "blue", add = TRUE  , n = 1000)
legend(x=0.5, y=0.8, legend = c("glm()", "logistf()"), lty = c(1,1), lwd = c(2,1), col = c("red", "blue"), bty = "n")

# corregir grafica roja
mod.fit2 <- glm(y ~ x1, set2, family = binomial(link = logit), trace=TRUE)
plot(x = set2$x1, y = set2$y, main = "Gráfica para set2", ylab ="Probabilidad estimada", xlab = expression(x[1]), panel.first = grid(col = "gray", lty = "dotted") )
curve(expr = predict(object = mod.fit2, newdata = data.frame(x1 = x), type = "response"), col = "red", add = TRUE , lwd = 2, n = 1000)
mod.fit.firth2 <- logistf (y ~ x1, data =  set2)
beta.hat <- mod.fit.firth2$coefficients
curve(expr = exp(beta.hat[1]+ beta.hat[2]*x)/(1 + exp(beta.hat[1]+ beta.hat[2]*x)) , col = "blue", add = TRUE  , n = 1000)
legend(x=0.5, y=0.8, legend = c("glm()", "logistf()"), lty = c(1,1), lwd = c(2,1), col = c("red", "blue"), bty = "n")


# mod.fit3 <- glm(y ~ x1)

```


simulación montecarlo

logit(pi) = beta0 + beta1*x con valor mínimo 0 y valor máximo 1


```{r}

pi.x0 <- 0.01 
beta0 <- log(pi.x0/(1-pi.x0))
beta0

#valor de beta1 cuando x=1
pi.x1 <- 0.99
beta1 <- log(pi.x1/(1-pi.x1))- beta0
beta1

x11()
curve(expr = exp(beta0 + beta1*x)/(1+exp(beta0 + beta1*x)), xlim = c(0,1), ylab = expression(pi), n=1000, lwd=3, xlab = expression(x[1]) )
# simular datos que sigan una distribución binomial
set.seed(8238)
x <- runif(n=500, min = 0, max = 1)
x1 <- runif(n=500, min = 0, max = 1)
pi <- exp(beta0 + beta1*x)/(1+exp(beta0 + beta1*x))
head(pi)

set.seed(1829)
y <- rbinom(n=length(x1), size = 1, prob = pi)
head(data.frame(y,x1, pi), n=10)

mod.fit <- glm(y ~ x1, family = binomial(link = logit)) # no es necesario el argumento data
mod.fit$coefficients
beta0;beta1
beta.hat0 <- mod.fit$coefficients[1]
beta.hat1 <- mod.fit$coefficients[2]
curve(expr = exp(beta.hat0 + beta.hat1*x)/(1+exp(beta.hat0 + beta.hat1*x)), xlim = c(0,1), ylab = expression(pi),add = TRUE, col = "red", n=1000 )
legend(x=0, y=1, legend = c("verdadero", "logistf()"), lty = c(1,1), lwd = c(2,1), col = c("red", "blue"), bty = "n")


#revisar que hice mal

```

